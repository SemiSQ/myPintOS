			+--------------------+
			| CS 140             |
			| PROJECT 1: THREADS |
			| DESIGN DOCUMENT    |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Bowen Bao <semisq@outlook.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Bowen Bao : all

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* How many ticks has left for thread to sleep. */
int block_ticks in thread.h
/* Thread in the block_list. */
struct list_elem blockelem in thread.h
/* List of threads asleep. */
static list block_list in thread.c

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

A2: In a call to timer_sleep(), it checks if the interrupt is on and 
than calls thread_sleep(). thread_sleep() puts the current thread into 
the block_list, sets the thread's block_ticks to ticks and block the interrupt 
and call thread_block()
Every time the timer_interrupt() is being called, it will call on
thread_check_sleep() to  check through the block_list, decreasing the 
block_ticks of every thread. If a thread has its block_ticks 0, it will 
be removed from the block_list, and be run thread_unblock() on it.

A3: Adding up a list of threads asleep, so that it would not need to 
check every thread to see if it's an asleep thread and then decrease 
its block_ticks and unblock it.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

At this point, by disabling interrupts.
thread_block can't use locks cause lock_acquire which will call a thread_block 
and result in an infinite loop.
Perhaps it can be dealt with changing the lock_acquire into try_lock_acquire, 
which will not block the current thread, instead put a while around it.
But isn't that busywaiting? Why would blocking a thread needs blocking it? 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

At this point, same as the letter.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Another design is to see through all the threads and check if it exceed
its ticks so that it can be awanken, which costs a lot more since there 
are a lot of threads un-sleep and in the whole list.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Depth of the thread's priority donation. */
int donation_depth
/* Lock of the priority */
struct lock pri_lock

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

int donation_depth
One thread can only donate its priority if its donation_depth has not 
exceed a certain number(8 in this case). Thread getting a donation sets 
its donation_depth 1 up to the former. 

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When a thread is put in the ready list, it checks. 
Inplementing this by changing the sema_up().

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

It first check if the lock holder is not current thread, then it check both
if the lock holder's priority is lower than that of current thread and if 
the current thread already has a donation depth of 8. If it is, then the 
current thread passes its priority to the lock holder, while also setting 
the lock holder's donation_depth to that of the current thread +1

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release, it sets the lock holder to NULL and runs the sema_up(). 
This sema_up() is well implemented with priority scheduler that it will find 
the thread with the highest priority and pass the lock to it.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Thread's priority may be changed by:
1. Thread itself.
2. Thread acquiring a lock it holds donating priority
Let every thread has a lock, which must be acquired to change its priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

NEED FURTHER THINKING.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

